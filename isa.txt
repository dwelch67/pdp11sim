

---- KA11 CENTRAL PROCESSOR ----

General Registers -- The KA11 processor contains eight 16-bit general
purpose registers.  These eight general purpose registers (referred
to as R0,R1,...,R7) may be used as accumulators, as index registers,
or as stack pointers.  One of these registers R7, is reserved as the
program counter (PC).  Generally the PC holds the address of the
next instruction, but it may point to data or to an address of data.
The register R6 has the special function of processor stack pointer.

Central Processor Status Register -- The Centra Processor Status Register
(PS) contains information on the result of previous operations.  Four
bits of the PS are assigned to monitoring different results of previous
instructions.  These bits are as follows:
  Z - if the result was zero
  N - if the result was negative
  C - if the operation resulted in a carry from the most significant bit
  V - if the operation resulted in a arithmetic overflow

FEDCBA9876543210
xxxxxxxxxxxxNZVC

Core Memory -- The PDP-11 allows both 16-bit word and 8-bit byte
addressing.  The address space may be filled by core memory and
peripheral device registers.  The top 4906 words generally are reserved
for peripheral device registers.  The remainder of address space can
be used for read-write core memory or read-only core memory.

Interrupt Requests -- Devices that request interrupts on the bus
request lines (BR7, BR6, BR5, BR4) can take advantage of the power
and flexibility of the processor.  The entire instruction set is
available for manipulating data and status registers.  When a device
servicing program must be run, the task currently under way in the
central processor is interrupted and the device service routine is
initiated.  Once the device request has been satisfied, the processor
returns to the interrupted task.

In the PDP-11, the return address for the interrupted routine and
the processor status word are held in a "stack".  A statck is a
dynamic sequential list of data with special provisions for access
from one end.  A stack is also called a "push down" or "LIFO" (Last-In
First-Out) list.  Storage and retrieval from stacks is called "pushing"
and "popping" respectively.

In the PDP-11, a stack is automatically maintained by the hardware for
interrupt processing.  Thus, higher level requests can interrupt the
processing of lower level interrupt service, and automatically return
control to the lower level interrupt service routines when the higher
level servicing is completed.

1.  Priorities permitting, the processor relinquishes the bus to that
device.

2.  When the device has control of the bus, it sends the processor an
interrupt command with the address of the words in memory containing
the address and status of the appropriate device service routine.

3.  The processor then "pushes" first the current central processor
status (PS) and then, the current program counter (PC) onto the
processor stack.

4. The new PC and PS (the "interrupt vector") are taken from the
location specified by the device and th enext location, and the
device service routine is begun.  Note that those opeartions all
occur automatically and that no device-polling is required to determine
which service routine to execute.

5.

6.  The device service routine can resume the interrupted process by
executing the RTI (Return from Interrupt) instruction which "pops"
the processor stack back into the PC and PS.

7.  A device service routine can be interrupted in turn bya sufficiently
high priority bus request at any time after completion of its first
instruction.

8.  If such an interrupt occurs, the PC and PS of the device service
routine are automatically pushed into the stack and the new device
routine initiated as above.  This "nesting" of priority interrupts
can go on to any level, limited only by the core available for the
stack.  More commonly this process will nest only four levels deep
since there are four levels of BR signals.

The Stack - The stack pointer points at the element that is on
the top of the stack.  Pushing something on the stack involves
first decrementing the stack pointer address by 2 then writing to
memory at the address specified by the new stack pointer.  Popping
something off of the stack involves reading from memory at the address
specified by the stack pointer then adding 2 to the address in the
stack pointer register.

-- ADDRESSING MODES --






